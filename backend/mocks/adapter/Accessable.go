// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Accessable is an autogenerated mock type for the Accessable type
type Accessable[T interface{}] struct {
	mock.Mock
}

// NewApi provides a mock function with given fields:
func (_m *Accessable[T]) NewApi() *T {
	ret := _m.Called()

	var r0 *T
	if rf, ok := ret.Get(0).(func() *T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	return r0
}

// NewAccessable creates a new instance of Accessable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessable[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Accessable[T] {
	mock := &Accessable[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
