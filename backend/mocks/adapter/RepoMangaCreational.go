// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	entity "bacakomik/record/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"

	mysql "bacakomik/repository/mysql"
)

// RepoMangaCreational is an autogenerated mock type for the RepoMangaCreational type
type RepoMangaCreational struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *RepoMangaCreational) Create(ctx context.Context, data *entity.Manga) (int, error) {
	ret := _m.Called(ctx, data)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Manga) (int, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Manga) int); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Manga) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *RepoMangaCreational) Delete(ctx context.Context, id int) bool {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *RepoMangaCreational) GetAll(ctx context.Context) []*entity.Manga {
	ret := _m.Called(ctx)

	var r0 []*entity.Manga
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Manga); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Manga)
		}
	}

	return r0
}

// GetOne provides a mock function with given fields: ctx, id
func (_m *RepoMangaCreational) GetOne(ctx context.Context, id int) *entity.Manga {
	ret := _m.Called(ctx, id)

	var r0 *entity.Manga
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Manga); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Manga)
		}
	}

	return r0
}

// NewApi provides a mock function with given fields:
func (_m *RepoMangaCreational) NewApi() *mysql.MangaRepository {
	ret := _m.Called()

	var r0 *mysql.MangaRepository
	if rf, ok := ret.Get(0).(func() *mysql.MangaRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mysql.MangaRepository)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, data, id
func (_m *RepoMangaCreational) Update(ctx context.Context, data *entity.Manga, id int) error {
	ret := _m.Called(ctx, data, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Manga, int) error); ok {
		r0 = rf(ctx, data, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepoMangaCreational creates a new instance of RepoMangaCreational. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoMangaCreational(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoMangaCreational {
	mock := &RepoMangaCreational{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
