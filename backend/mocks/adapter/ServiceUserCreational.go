// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	entity "bacakomik/record/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ServiceUserCreational is an autogenerated mock type for the ServiceUserCreational type
type ServiceUserCreational struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *ServiceUserCreational) Create(ctx context.Context, data *entity.User) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ServiceUserCreational) Delete(ctx context.Context, id int) bool {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *ServiceUserCreational) GetAll(ctx context.Context) []*entity.User {
	ret := _m.Called(ctx)

	var r0 []*entity.User
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.User)
		}
	}

	return r0
}

// GetOne provides a mock function with given fields: ctx, id
func (_m *ServiceUserCreational) GetOne(ctx context.Context, id int) *entity.User {
	ret := _m.Called(ctx, id)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, data, id
func (_m *ServiceUserCreational) Update(ctx context.Context, data *entity.User, id int) error {
	ret := _m.Called(ctx, data, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User, int) error); ok {
		r0 = rf(ctx, data, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceUserCreational creates a new instance of ServiceUserCreational. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceUserCreational(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceUserCreational {
	mock := &ServiceUserCreational{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
