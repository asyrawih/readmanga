// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Retrival is an autogenerated mock type for the Retrival type
type Retrival[T interface{}, K interface{}] struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *Retrival[T, K]) GetAll(ctx context.Context) []*T {
	ret := _m.Called(ctx)

	var r0 []*T
	if rf, ok := ret.Get(0).(func(context.Context) []*T); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}

	return r0
}

// GetOne provides a mock function with given fields: ctx, id
func (_m *Retrival[T, K]) GetOne(ctx context.Context, id K) *T {
	ret := _m.Called(ctx, id)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, K) *T); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	return r0
}

// NewRetrival creates a new instance of Retrival. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRetrival[T interface{}, K interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Retrival[T, K] {
	mock := &Retrival[T, K]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
