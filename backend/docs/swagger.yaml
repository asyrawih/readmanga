basePath: /
definitions:
  entity.Chapter:
    properties:
      chapter:
        type: string
      content:
        type: string
      id:
        type: integer
      manga_id:
        type: integer
    type: object
  entity.Manga:
    properties:
      author:
        type: string
      created_at:
        type: string
      created_by:
        type: integer
      id:
        type: integer
      release_date:
        type: string
      sinopsis:
        type: string
      status:
        type: string
      title:
        type: string
      total_chapter:
        type: integer
      type:
        type: string
    type: object
  entity.Media:
    properties:
      id:
        type: integer
      model_id:
        type: integer
      model_type:
        type: string
      url:
        type: string
    type: object
  model.CreateChapterRequest:
    properties:
      chapter:
        type: string
      content:
        type: string
      manga_id:
        type: integer
    type: object
  model.CreateMangaRequest:
    properties:
      author:
        type: string
      release_date:
        type: string
      sinopsis:
        type: string
      status:
        type: string
      title:
        type: string
      total_chapter:
        type: integer
      type:
        type: string
    type: object
  model.Response:
    properties:
      data: {}
      error_code:
        type: integer
      message:
        type: string
    type: object
  model.UpdateMangaRequest:
    properties:
      author:
        type: string
      release_date:
        type: string
      sinopsis:
        type: string
      status:
        type: string
      title:
        type: string
      total_chapter:
        type: integer
      type:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: hanan@asyrawih.id
    name: API manga
  description: Manga service api
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Manga service API
  version: 1.0.0
paths:
  /chapter:
    get:
      consumes:
      - application/json
      description: get all manga
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Chapter'
                  type: array
              type: object
      summary: List manga
      tags:
      - chapters
    post:
      consumes:
      - application/json
      description: create chapters
      parameters:
      - description: manga requested info
        in: body
        name: manga
        required: true
        schema:
          $ref: '#/definitions/model.CreateChapterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Chapter'
              type: object
      summary: craete chapter
      tags:
      - chapters
  /chapter/{chapterID}:
    get:
      consumes:
      - application/json
      description: get all manga
      parameters:
      - description: Manga Id
        in: path
        name: chapterID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Chapter'
                  type: array
              type: object
      summary: List manga
      tags:
      - chapters
  /manga:
    get:
      consumes:
      - application/json
      description: get all manga
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Manga'
                  type: array
              type: object
      summary: List manga
      tags:
      - manga
    post:
      consumes:
      - application/json
      description: create manga by accept body json
      parameters:
      - description: manga requested info
        in: body
        name: manga
        required: true
        schema:
          $ref: '#/definitions/model.CreateMangaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Manga'
              type: object
      summary: create manga
      tags:
      - manga
  /manga/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Manga based on id
      parameters:
      - description: Manga Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Remove manga
      tags:
      - manga
    get:
      consumes:
      - application/json
      description: get all manga
      parameters:
      - description: Manga Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Manga'
              type: object
      summary: List manga
      tags:
      - manga
    put:
      consumes:
      - application/json
      description: update manga by pass id
      parameters:
      - description: Manga Id
        in: path
        name: id
        required: true
        type: integer
      - description: manga requested info
        in: body
        name: manga
        required: true
        schema:
          $ref: '#/definitions/model.UpdateMangaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update Manga
      tags:
      - manga
  /media:
    post:
      consumes:
      - multipart/form-data
      description: create media
      parameters:
      - description: image file
        in: formData
        name: image
        required: true
        type: file
      - description: model_id
        in: formData
        name: model_id
        required: true
        type: integer
      - description: model_type
        in: formData
        name: model_type
        required: true
        type: string
      - description: location
        in: formData
        name: manga
        required: true
        type: string
      - description: location
        in: formData
        name: chapter
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Media'
              type: object
      summary: create Media
      tags:
      - media
  /media/batch:
    post:
      consumes:
      - multipart/form-data
      description: create media
      parameters:
      - collectionFormat: csv
        description: image file
        in: formData
        items:
          type: file
        name: images
        required: true
        type: array
      - description: model_id
        in: formData
        name: model_id
        required: true
        type: integer
      - description: model_type
        in: formData
        name: model_type
        required: true
        type: string
      - description: judul manga
        in: formData
        name: manga
        required: true
        type: string
      - description: chapter manga
        in: formData
        name: chapter
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Media'
                  type: array
              type: object
      summary: create Media
      tags:
      - media
swagger: "2.0"
